@using LockerApp.Models.ViewModels
@using LockerApp.Models.LockerDB
@using Microsoft.EntityFrameworkCore
@using System.Threading
@using LockerApp.Data.LockerDB
@inject IServiceProvider ServiceProvider
@implements IDisposable

@if (Show)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Inventory Transfer</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="OnClose"></button>
                </div>
                <div class="modal-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading transfer details...</p>
                        </div>
                    }
                    else if (transferDetails == null || !transferDetails.Any())
                    {
                        <div class="alert alert-info">
                            <strong>No transfer records found</strong> for this item and location.
                            <div class="mt-2">
                                <small class="text-muted">Item ID: @ItemId</small><br/>
                                <small class="text-muted">Location ID: @InvlocId</small>
                            </div>
                        </div>
                    }
                    else
                    {                        <div class="mb-3">
                            <div class="item-info">
                                <div class="item-name">@ItemName</div>
                                <div class="item-id">ID: @ItemId</div>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-striped table-sm">                                <thead class="table-dark">
                                    <tr>
                                        <th class="location-id-column"></th>
                                        <th class="location-name-column">From</th>
                                        <th class="location-id-column"></th>
                                        <th class="location-name-column">To</th>
                                        <th>Date</th>
                                        <th>Qty</th>
                                        <th>Cost</th>
                                        <th>PO Num</th>
                                        <th class="inspected-by-column">Inspected By</th>
                                    </tr>
                                </thead><tbody>                                    @foreach (var transfer in transferDetails)
                                    {
                                        <tr class="@(changedRecords.Contains(transfer.Id) ? "changed" : "")">
                                            <td class="location-id-column">@transfer.FromLocation</td>
                                            <td class="location-name-column">@transfer.FromName</td>
                                            <td class="location-id-column">@transfer.ToLocation</td>
                                            <td class="location-name-column">@transfer.ToName</td>
                                            <td>@(transfer.TransferDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>                                            <td>
                                                <input type="number" class="form-control form-control-sm editable-input" 
                                                       step="0.01" 
                                                       value="@transfer.Quantity" 
                                                       @oninput="(e) => UpdateQuantity(transfer, e.Value?.ToString())" />
                                            </td>
                                            <td>
                                                <input type="number" class="form-control form-control-sm editable-input" 
                                                       step="0.01" 
                                                       value="@transfer.CostPer" 
                                                       @oninput="(e) => UpdateCostPer(transfer, e.Value?.ToString())" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control form-control-sm editable-input" 
                                                       value="@transfer.PONumber" 
                                                       @oninput="(e) => UpdatePONumber(transfer, e.Value?.ToString())" />
                                            </td>
                                            <td class="inspected-by-column">
                                                <input type="text" class="form-control form-control-sm editable-input" 
                                                       value="@transfer.InspectedBy" 
                                                       @oninput="(e) => UpdateInspectedBy(transfer, e.Value?.ToString())" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (transferDetails.Count > 10)
                        {
                            <div class="mt-2">
                                <small class="text-muted">Showing @transferDetails.Count transfer record(s)</small>
                            </div>
                        }
                    }
                </div>                <div class="modal-footer">
                    @if (hasChanges)
                    {
                        <button type="button" class="btn btn-success me-2" @onclick="SaveChanges" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            Save Changes
                        </button>
                        <button type="button" class="btn btn-warning me-2" @onclick="CancelChanges">Cancel Changes</button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">Close</button>
                </div>
            </div>
        </div>
    </div>    <div class="modal-backdrop fade show"></div>
}

<style>
    /* location id columns */
    .location-id-column {
        min-width: 60px;
        width: 60px;
    }

    /* location name columns */
    .location-name-column {
        min-width: 120px;
        width: 120px;
    }
    
    /* inspected by column */
    .inspected-by-column {
        min-width: 200px;
        width: 200px;
    }
    
    .item-info {
        margin-bottom: 0.5rem;
    }
    
    .item-name {
        font-size: 1.1rem;
        font-weight: bold;
        color: #333;
    }
    
    .item-id {
        font-size: 0.9rem;
        color: #666;
        font-style: italic;
    }
    
    /* Compact table styling */
    .table th, .table td {
        padding: 0.375rem 0.5rem;
        vertical-align: middle;
    }
    
    .table-responsive {
        overflow-x: visible;
    }
    
    /* Editable input styling */
    .editable-input {
        min-width: 80px;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
    }
    
    .editable-input:focus {
        background-color: white;
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
    
    /* Highlight changed rows */
    .table tbody tr.changed {
        background-color: #fff3cd !important;
    }
</style>

@code {    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public int InvlocId { get; set; }
    [Parameter] public string ItemId { get; set; } = "";
    [Parameter] public string ItemName { get; set; } = "";
    private List<InvTranViewModel>? transferDetails;
    private List<InvTranViewModel>? originalTransferDetails;
    private HashSet<int> changedRecords = new();
    private bool isLoading = false;
    private bool isSaving = false;
    private bool hasChanges = false;
    private bool isFromLocationSearch = false;
    private bool hasLoadedData = false;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    protected override async Task OnParametersSetAsync()
    {
        // Reset data loading flag when modal is closed
        if (!Show)
        {
            hasLoadedData = false;
            transferDetails = null;
        }
        // Load data when modal opens and all required parameters are available
        else if (Show && !hasLoadedData && InvlocId > 0 && !string.IsNullOrEmpty(ItemId))
        {
            hasLoadedData = true;
            await LoadTransferDetails();
        }
        
        await base.OnParametersSetAsync();
    }    private async Task LoadTransferDetails()
    {
        // Use semaphore to prevent concurrent database operations
        if (!await _loadingSemaphore.WaitAsync(0)) // Don't wait, just check if available
        {
            return;
        }
        
        try
        {
            if (isLoading) return; // Additional check
            
            isLoading = true;
            StateHasChanged();
            
            string trimmedItemId = ItemId?.Trim() ?? "";
            isFromLocationSearch = false;
            
            // Create a new scoped DbContext for this operation to avoid concurrency issues
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<LockerDbContext>();
            
            // Primary query - ToLocation match
            transferDetails = await dbContext.InvTrans
                .Where(t => t.ToLocation == InvlocId && 
                           t.ItemId != null && 
                           t.ItemId.Trim().ToLower() == trimmedItemId.ToLower())
                .OrderByDescending(t => t.TransferDate)
                .Select(t => new InvTranViewModel
                {
                    Id = t.Id,
                    ItemId = t.ItemId,
                    ItemName = t.ItemName,
                    ItemDescription = t.ItemDescription,
                    FromLocation = t.FromLocation,
                    FromName = t.FromName,
                    ToLocation = t.ToLocation,
                    ToName = t.ToName,
                    Company = t.Company,
                    Job = t.Job,
                    IssueValue = t.IssueValue,
                    TakenFrom = t.TakenFrom,
                    TransferDate = t.TransferDate,
                    Quantity = t.Quantity,
                    CostPer = t.CostPer,
                    PONumber = t.PONumber,
                    InspectedBy = t.InspectedBy
                })
                .ToListAsync();
            
            // Fallback query - FromLocation match
            if (transferDetails.Count == 0)
            {
                isFromLocationSearch = true;
                
                transferDetails = await dbContext.InvTrans
                    .Where(t => t.FromLocation == InvlocId && 
                               t.ItemId != null && 
                               t.ItemId.Trim().ToLower() == trimmedItemId.ToLower())
                    .OrderByDescending(t => t.TransferDate)
                    .Select(t => new InvTranViewModel
                    {
                        Id = t.Id,
                        ItemId = t.ItemId,
                        ItemName = t.ItemName,
                        ItemDescription = t.ItemDescription,
                        FromLocation = t.FromLocation,
                        FromName = t.FromName,
                        ToLocation = t.ToLocation,
                        ToName = t.ToName,
                        Company = t.Company,
                        Job = t.Job,
                        IssueValue = t.IssueValue,
                        TakenFrom = t.TakenFrom,
                        TransferDate = t.TransferDate,
                        Quantity = t.Quantity,
                        CostPer = t.CostPer,                        PONumber = t.PONumber,
                        InspectedBy = t.InspectedBy
                    })
                    .ToListAsync();
            }
            
            // Create backup of original data for cancel functionality
            if (transferDetails != null)
            {
                originalTransferDetails = transferDetails.Select(t => new InvTranViewModel
                {
                    Id = t.Id,
                    ItemId = t.ItemId,
                    ItemName = t.ItemName,
                    ItemDescription = t.ItemDescription,
                    FromLocation = t.FromLocation,
                    FromName = t.FromName,
                    ToLocation = t.ToLocation,
                    ToName = t.ToName,
                    Company = t.Company,
                    Job = t.Job,
                    IssueValue = t.IssueValue,
                    TakenFrom = t.TakenFrom,
                    TransferDate = t.TransferDate,
                    Quantity = t.Quantity,
                    CostPer = t.CostPer,
                    PONumber = t.PONumber,                    InspectedBy = t.InspectedBy
                }).ToList();
            }
        }
        catch (Exception)
        {
            transferDetails = new List<InvTranViewModel>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            _loadingSemaphore.Release();
        }
    }    private void OnFieldChanged(InvTranViewModel transfer)
    {
        changedRecords.Add(transfer.Id);
        hasChanges = changedRecords.Any();
        StateHasChanged();
    }    private void UpdateQuantity(InvTranViewModel transfer, string? value)
    {
        if (double.TryParse(value, out double result))
        {
            transfer.Quantity = result;
        }
        else
        {
            transfer.Quantity = null;
        }
        OnFieldChanged(transfer);
    }    private void UpdateCostPer(InvTranViewModel transfer, string? value)
    {
        if (double.TryParse(value, out double result))
        {
            transfer.CostPer = result;
        }
        else
        {
            transfer.CostPer = 0;
        }
        OnFieldChanged(transfer);
    }

    private void UpdatePONumber(InvTranViewModel transfer, string? value)
    {
        transfer.PONumber = value;
        OnFieldChanged(transfer);
    }

    private void UpdateInspectedBy(InvTranViewModel transfer, string? value)
    {
        transfer.InspectedBy = value;
        OnFieldChanged(transfer);
    }    private async Task SaveChanges()
    {
        if (!hasChanges || transferDetails == null) return;

        isSaving = true;
        StateHasChanged();

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<LockerDbContext>();

            foreach (var transfer in transferDetails.Where(t => changedRecords.Contains(t.Id)))
            {
                // Find the record by Id - note that InvTrans might be a keyless entity
                var dbRecord = await dbContext.InvTrans
                    .Where(t => t.Id == transfer.Id)
                    .FirstOrDefaultAsync();
                    
                if (dbRecord != null)
                {
                    dbRecord.Quantity = transfer.Quantity;
                    dbRecord.CostPer = transfer.CostPer;
                    dbRecord.PONumber = transfer.PONumber;
                    dbRecord.InspectedBy = transfer.InspectedBy;
                }
            }

            await dbContext.SaveChangesAsync();
            
            // Update original data and clear changes
            if (transferDetails != null)
            {
                originalTransferDetails = transferDetails.Select(t => new InvTranViewModel
                {
                    Id = t.Id,
                    ItemId = t.ItemId,
                    ItemName = t.ItemName,
                    ItemDescription = t.ItemDescription,
                    FromLocation = t.FromLocation,
                    FromName = t.FromName,
                    ToLocation = t.ToLocation,
                    ToName = t.ToName,
                    Company = t.Company,
                    Job = t.Job,
                    IssueValue = t.IssueValue,
                    TakenFrom = t.TakenFrom,
                    TransferDate = t.TransferDate,
                    Quantity = t.Quantity,
                    CostPer = t.CostPer,
                    PONumber = t.PONumber,
                    InspectedBy = t.InspectedBy
                }).ToList();
            }
            
            changedRecords.Clear();
            hasChanges = false;
        }
        catch (Exception ex)
        {
            // Handle error - could show a message to user
            Console.WriteLine($"Error saving changes: {ex.Message}");
            // You could add a toast notification or error message here
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void CancelChanges()
    {
        if (originalTransferDetails != null && transferDetails != null)
        {
            for (int i = 0; i < transferDetails.Count; i++)
            {
                var original = originalTransferDetails[i];
                var current = transferDetails[i];
                
                current.Quantity = original.Quantity;
                current.CostPer = original.CostPer;
                current.PONumber = original.PONumber;
                current.InspectedBy = original.InspectedBy;
            }
        }
          changedRecords.Clear();
        hasChanges = false;
        StateHasChanged();
    }

    private async Task OnClose()
    {
        hasLoadedData = false;
        transferDetails = null;
        originalTransferDetails = null;
        changedRecords.Clear();
        hasChanges = false;
        await ShowChanged.InvokeAsync(false);
    }

    public void Dispose()
    {
        _loadingSemaphore?.Dispose();
    }
}
