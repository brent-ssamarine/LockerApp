@using AccessMigrationApp.Models.ViewModels
@using AccessMigrationApp.Models.LockerDB
@using Microsoft.EntityFrameworkCore
@using System.Threading
@using AccessMigrationApp.Data.LockerDB
@inject IServiceProvider ServiceProvider
@implements IDisposable

@if (Show)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Inventory Transfer Details</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="OnClose"></button>
                </div>
                <div class="modal-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading transfer details...</p>
                        </div>
                    }
                    else if (transferDetails == null || !transferDetails.Any())
                    {
                        <div class="alert alert-info">
                            <strong>No transfer records found</strong> for this item and location.
                            <div class="mt-2">
                                <small class="text-muted">Item ID: @ItemId</small><br/>
                                <small class="text-muted">Location ID: @InvlocId</small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <h6>Item: @ItemName (@ItemId)</h6>
                            <small class="text-muted">Showing transfers where @(isFromLocationSearch ? "From" : "To") Location = @InvlocId</small>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-striped table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th></th>
                                        <th>From</th>
                                        <th></th>
                                        <th>To</th>
                                        <th>Date</th>
                                        <th>Qty</th>
                                        <th>Cost</th>
                                        <th>PO Num</th>
                                        <th class="inspected-by-column">Inspected By</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var transfer in transferDetails)
                                    {
                                        <tr>
                                            <td>@transfer.FromLocation</td>
                                            <td>@transfer.FromName</td>
                                            <td>@transfer.ToLocation</td>
                                            <td>@transfer.ToName</td>
                                            <td>@(transfer.TransferDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                            <td class="text-end">@transfer.Quantity?.ToString("F2")</td>
                                            <td class="text-end">@(transfer.CostPer?.ToString("C") ?? "N/A")</td>
                                            <td>@transfer.PONumber</td>
                                            <td class="inspected-by-column">@transfer.InspectedBy</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (transferDetails.Count > 10)
                        {
                            <div class="mt-2">
                                <small class="text-muted">Showing @transferDetails.Count transfer record(s)</small>
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary me-2" @onclick="ManualReload">Reload Data</button>
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">Close</button>
                </div>
            </div>
        </div>
    </div>    <div class="modal-backdrop fade show"></div>
}

<style>
    .inspected-by-column {
        min-width: 200px;
        width: 200px;
    }
</style>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public int InvlocId { get; set; }
    [Parameter] public string ItemId { get; set; } = "";
    [Parameter] public string ItemName { get; set; } = "";    private List<InventoryTransferViewModel>? transferDetails;
    private bool isLoading = false;
    private bool isFromLocationSearch = false;
    private bool hasLoadedData = false;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);    protected override async Task OnParametersSetAsync()
    {
        // Reset data loading flag when modal is closed
        if (!Show)
        {
            hasLoadedData = false;
            transferDetails = null;
        }
        // Load data when modal opens and all required parameters are available
        else if (Show && !hasLoadedData && InvlocId > 0 && !string.IsNullOrEmpty(ItemId))
        {
            hasLoadedData = true;
            await LoadTransferDetails();
        }
        
        await base.OnParametersSetAsync();
    }    private async Task LoadTransferDetails()
    {
        // Use semaphore to prevent concurrent database operations
        if (!await _loadingSemaphore.WaitAsync(0)) // Don't wait, just check if available
        {
            return;
        }
        
        try
        {
            if (isLoading) return; // Additional check
            
            isLoading = true;
            StateHasChanged();
            
            string trimmedItemId = ItemId?.Trim() ?? "";
            isFromLocationSearch = false;
            
            // Create a new scoped DbContext for this operation to avoid concurrency issues
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<LockerDbContext>();
            
            // Primary query - ToLocation match
            transferDetails = await dbContext.InvTrans
                .Where(t => t.ToLocation == InvlocId && 
                           t.ItemId != null && 
                           t.ItemId.Trim().ToLower() == trimmedItemId.ToLower())
                .OrderByDescending(t => t.TransferDate)
                .Select(t => new InventoryTransferViewModel
                {
                    Id = t.Id,
                    ItemId = t.ItemId,
                    ItemName = t.ItemName,
                    ItemDescription = t.ItemDescription,
                    FromLocation = t.FromLocation,
                    FromName = t.FromName,
                    ToLocation = t.ToLocation,
                    ToName = t.ToName,
                    Company = t.Company,
                    Job = t.Job,
                    IssueValue = t.IssueValue,
                    TakenFrom = t.TakenFrom,
                    TransferDate = t.TransferDate,
                    Quantity = t.Quantity,
                    CostPer = t.CostPer,
                    PONumber = t.PONumber,
                    InspectedBy = t.InspectedBy
                })
                .ToListAsync();
            
            // Fallback query - FromLocation match
            if (transferDetails.Count == 0)
            {
                isFromLocationSearch = true;
                
                transferDetails = await dbContext.InvTrans
                    .Where(t => t.FromLocation == InvlocId && 
                               t.ItemId != null && 
                               t.ItemId.Trim().ToLower() == trimmedItemId.ToLower())
                    .OrderByDescending(t => t.TransferDate)
                    .Select(t => new InventoryTransferViewModel
                    {
                        Id = t.Id,
                        ItemId = t.ItemId,
                        ItemName = t.ItemName,
                        ItemDescription = t.ItemDescription,
                        FromLocation = t.FromLocation,
                        FromName = t.FromName,
                        ToLocation = t.ToLocation,
                        ToName = t.ToName,
                        Company = t.Company,
                        Job = t.Job,
                        IssueValue = t.IssueValue,
                        TakenFrom = t.TakenFrom,
                        TransferDate = t.TransferDate,
                        Quantity = t.Quantity,
                        CostPer = t.CostPer,
                        PONumber = t.PONumber,
                        InspectedBy = t.InspectedBy
                    })
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            transferDetails = new List<InventoryTransferViewModel>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            _loadingSemaphore.Release();
        }
    }private async Task ManualReload()
    {
        await LoadTransferDetails();
    }

    private async Task OnClose()
    {
        hasLoadedData = false;
        transferDetails = null;
        await ShowChanged.InvokeAsync(false);
    }

    public void Dispose()
    {
        _loadingSemaphore?.Dispose();
    }
}
