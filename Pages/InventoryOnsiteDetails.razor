@page "/inventory-onsite"
@using AccessMigrationApp.Models.LockerDB
@using AccessMigrationApp.Models.ViewModels
@using AccessMigrationApp.Services
@using AccessMigrationApp.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject LockerDbContext LockerDbContext
@inject NavigationManager NavigationManager
@inject IReportService ReportService
@inject IJSRuntime JSRuntime

<div class="instructions mb-3">
    <div>Click Details (button) to change Onhand value</div>
    <div>Click OnHand (blue box) to move inventory</div>
</div>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>
        Inventory
        @if (!string.IsNullOrEmpty(LocationName))
        {
            <small class="text-muted ms-2">- @LocationName</small>
        }
    </h3>
    @if (LocationId.HasValue)
    {
        <button class="btn btn-secondary" @onclick="GoBack">
            <span class="oi oi-arrow-left"></span> Back to Locations
        </button>
    }
</div>

@if (inventoryItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive inventory-table">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <div class="d-flex align-items-center" @onclick="() => SortData()">
                            Item
                            <span class="ms-1">
                                @if (currentSortField == "ItemName")
                                {
                                    <span class="oi @(isAscending ? "oi-caret-top" : "oi-caret-bottom")"></span>
                                }
                            </span>
                        </div>
                    </th>
                    <th>Billable</th>
                    <th>Note</th>
                    <th>Onhand</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in displayedItems ?? Enumerable.Empty<InventoryLocationViewModel>())
                {
                    <tr>
                        <input type="hidden" value="@item.InvlocId" />
                        <td class="item-name">
                            <input type="text" 
                                   class="form-control" 
                                   value="@item.ItemName"
                                   @onchange="@(e => ItemNameChanged(item, e))" />
                        </td>
                        <td class="billable">
                            <input type="checkbox" 
                                   class="form-check-input" 
                                   checked="@item.IsBillable"
                                   @onchange="@(e => BillableChanged(item, e))" />
                        </td>
                        <td class="note">
                            <input type="text" 
                                   class="form-control" 
                                   value="@item.Description"
                                   @onchange="@(e => DescriptionChanged(item, e))" />
                        </td>
                        <td class="onhand">
                            <div class="d-flex align-items-center">
                                <input type="number" 
                                       class="form-control onhand-input" 
                                       value="@item.OnHand"
                                       readonly />
                                <button class="btn btn-link ms-2 p-0" 
                                        @onclick="() => ShowMoveDialog(item)" title="Open Move Inventory Dialog">
                                    <span class="oi oi-transfer"></span>
                                </button>
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-secondary me-2" @onclick="() => ShowDetails(item)">Details</button>
                            <button class="btn btn-primary @(item.IsModified ? "" : "d-none")" @onclick="() => SaveChanges(item)">
                                Save
                            </button>
                        </td>
                    </tr>
                }                </tbody>
            </table>
        </div>

        @if (totalPages > 1)
        {
            <div class="d-flex justify-content-center my-3">
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }

        <div class="inventory-controls mt-4">
        <div class="row g-3 align-items-end">
            <div class="col-auto">
                <label>Print List For</label>
                <select class="form-select location-select" @bind="selectedPrintLocation">
                    <option value="">Select...</option>
                    @if (LocationId.HasValue)
                    {
                        <option value="@LocationId">@LocationId.Value.ToString().PadRight(5, '\u00A0')│ @(LocationName ?? "")</option>
                    }
                    @if (allLocations != null)
                    {
                        @foreach (var loc in allLocations)
                        {
                            <option value="@loc.LocationId">@loc.LocationId.ToString().PadRight(5, '\u00A0')│ @loc.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="PrintInventoryList" disabled="@(!CanPrint)">Print</button>
            </div>
            <div class="col-auto">
                <label>Transfer Remaining inventory</label>
                <select class="form-select location-select" @bind="selectedTransferLocation">
                    <option value="">Select...</option>
                    @if (transferLocations != null)
                    {
                        @foreach (var loc in transferLocations)
                        {
                            <option value="@loc.Id">@loc.Id.ToString().PadRight(5, '\u00A0')│ @loc.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="col-auto">
                <label>Taken From</label>
                <select class="form-select location-select" @bind="selectedTakenFromType">
                    <option value="">Select...</option>
                    @if (locationTypes != null)
                    {
                        foreach (var type in locationTypes)
                        {
                            <option value="@type.Id">@type.Id</option>
                        }
                    }
                </select>
            </div>
            <div style="width: 2rem;"></div> <!-- Added spacing -->
            <div class="col-auto d-flex align-items-end">
                <div>
                    <label>as of</label>
                    <select class="form-select location-select date-select" @bind="selectedAsOfDateString">
                        <option value="">Select...</option>
                        @if (asOfDateOptions != null && asOfDateOptions.Any())
                        {
                            @foreach (var dateStr in asOfDateOptions)
                            {
                                <option value="@dateStr">@dateStr</option>
                            }
                        }
                        else if (asOfDateOptions != null)
                        {
                            <option value="" disabled>No dates available</option>
                        }
                        else
                        {
                            <option value="" disabled>Loading dates...</option>
                        }
                    </select>
                </div>
                <div style="width: 2rem;"></div>
                <div>
                    <label>Inspected By</label>
                    <textarea class="form-control" @bind="inspectedBy" rows="3" style="width: 300px;"></textarea>
                </div>
                <div class="ms-3 d-flex align-items-end">
                    <button class="btn btn-primary">Move</button>
                </div>
            </div>
        </div>
    </div>
}

<MoveInventory Show="@showMoveDialog"
               ShowChanged="@((bool value) => showMoveDialog = value)"
               ItemName="@(selectedItem?.ItemName ?? string.Empty)"
               FromLocation="@LocationName"
               Quantity="@(selectedItem?.OnHand ?? 0)"
               Description="@(selectedItem?.Description ?? string.Empty)"
               OnMoveCompleted="OnMoveCompleted" />

<InventoryTransferDetails Show="@showDetailsDialog"
                         ShowChanged="@((bool value) => showDetailsDialog = value)"
                         InvlocId="@(selectedItem?.InvlocId ?? 0)"
                         ItemId="@(selectedItem?.ItemId ?? string.Empty)"
                         ItemName="@(selectedItem?.ItemName ?? string.Empty)" />

<style>
    .instructions {
        color: #4CAF50;
        font-weight: bold;
        font-size: 1.1rem;
    }

    .inventory-table {
        border: 1px solid #ccc;
    }

    .inventory-table thead {
        background-color: #4a77aa;
        color: white;
    }

    .inventory-table th {
        font-weight: normal;
        padding: 10px;
    }

    .item-name {
        font-weight: bold;
    }

    .onhand-box {
        width: 80px;
        padding: 2px 8px;
        border: 1px solid #0d6efd;
        background-color: white;
        text-align: right;
        cursor: pointer;
    }

    .onhand-box:hover {
        background-color: #f8f9fa;
    }
    
    .transfer-location-select,
    .location-select {
        font-family: Consolas, monospace;
        white-space: pre;
    }

    .inventory-controls label {
        display: block;
        margin-bottom: 0.3rem;
        color: #666;
    }

    .location-select {
        font-family: Consolas, monospace;
        white-space: pre;
    }

    .location-select option {
        font-family: Consolas, monospace;
        white-space: pre;
    }

    .onhand-input {
        width: 80px;
        text-align: right;
        padding: 2px 8px;
        border: 1px solid #0d6efd;
    }

    .onhand-input:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .form-control {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .form-check-input {
        margin-top: 0.5rem;
        margin-left: 0.5rem;
    }

    .note .form-control {
        min-width: 200px;
    }

    .item-name .form-control {
        min-width: 150px;
        font-weight: bold;
    }

    /* Make table rows more compact */
    .table > :not(caption) > * > * {
        padding: 0.25rem 0.5rem;
    }
    
    .table th {
        padding-top: 0.25rem;
        padding-bottom: 0.25rem;
    }

    .table th div {
        cursor: pointer;
        user-select: none;
    }
    
    .form-select, .form-control, .location-select {
        font-family: Consolas, monospace;
        white-space: pre;
        height: calc(1.5em + 0.5rem + 2px);
        line-height: 1.5;
    }

    .date-select {
        min-width: 120px; /* Ensures dates are fully visible */
    }

    /* Pagination styles */
    .pagination {
        margin-bottom: 0;
    }

    .page-link {
        padding: 0.375rem 0.75rem;
    }

    .page-item.active .page-link {
        background-color: #4a77aa;
        border-color: #4a77aa;
    }

    .pagination .page-link:focus {
        box-shadow: 0 0 0 0.2rem rgba(74, 119, 170, 0.25);
    }
</style>

<div style="height: 3rem;"></div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? LocationId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? LocationName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Finished { get; set; } = 0;

    private List<InventoryLocationViewModel>? inventoryItems;
    private List<InventoryLocationViewModel>? displayedItems;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => inventoryItems == null ? 0 : (int)Math.Ceiling(inventoryItems.Count / (double)pageSize);
    private List<LocationViewModel>? allLocations;
    private List<Location>? transferLocations;
    private List<LocationType>? locationTypes;
    private string? selectedPrintLocation;
    private string? selectedTransferLocation;
    private string? selectedTakenFromType;
    private string inspectedBy = "";
    private DateTime asOfDate = DateTime.Today;
    private bool showMoveDialog;
    private bool showDetailsDialog;
    private InventoryLocationViewModel? selectedItem;
    private List<string>? asOfDateOptions;
    private string? selectedAsOfDateString;

    private bool CanPrint => !string.IsNullOrEmpty(selectedPrintLocation);

    private bool isAscending = true;
    private string currentSortField = "ItemName";

    protected override async Task OnInitializedAsync()
    {
        // Set the initial selected location
        if (LocationId.HasValue)
        {
            selectedPrintLocation = LocationId.Value.ToString();
        }

        await LoadLocations();
        await LoadTransferLocations();
        await LoadLocationTypes();
        await LoadData();
        await LoadAsOfDateOptionsAsync();
    }

    private async Task LoadLocations()
    {
        try
        {
            if (LocationId == null) return;

            allLocations = await LockerDbContext.Locations
                .Where(l => 
                    l.Finished != 1 &&               // finished = False
                    l.LocationType != "SUPPLIER" &&  // loc_type <> "SUPPLIER"
                    l.LocationType != null) 
                .OrderBy(l => l.Id)                  // ORDER BY loc_id
                .Select(l => new LocationViewModel 
                { 
                    LocationId = l.Id,             // loc_id
                    Name = l.Name ?? "",           // name
                    Berth = l.Berth ?? ""
                })
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading locations: {ex.Message}");
        }
    }

    private async Task LoadTransferLocations()
    {
        try
        {
            if (LocationId == null) return;

            // Filter locations based on the specified conditions:
            // 1. loc_id <> current location
            // 2. finished = False
            // 3. loc_type <> 'SUPPLIER'
            transferLocations = await LockerDbContext.Locations
                .Where(l => 
                    l.Id != LocationId.Value &&  // loc_id <> current location
                    l.Finished != 1 &&            // finished = False
                    l.LocationType != "SUPPLIER" &&  // loc_type <> 'SUPPLIER'
                    l.LocationType != null)        // loc_type is not null
                .OrderBy(l => l.Name)             // Order by name for better UX
                .ToListAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transfer locations: {ex.Message}");
        }
    }

    private async Task LoadLocationTypes()
    {
        try
        {
            locationTypes = await LockerDbContext.LocationTypes.OrderBy(t => t.Id).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading location types: {ex.Message}");
        }
    }

    private void UpdateDisplayedItems()
    {
        if (inventoryItems == null) return;
        
        var skip = (currentPage - 1) * pageSize;
        displayedItems = inventoryItems
            .Skip(skip)
            .Take(pageSize)
            .ToList();
    }

    private async Task LoadData()
    {
        try
        {
            var query = LockerDbContext.InventoryLocations
                .FromSqlRaw("SELECT * FROM dbo.inventory_onsite")
                .Select(il => new InventoryLocationViewModel
                {
                    InvlocId = il.Id,  // Map invloc_id to InvlocId property
                    ItemId = il.ItemId!,
                    LocationId = il.LocationId ?? 0,
                    LocationName = il.Location!.Name!,
                    Berth = il.Location.Berth!,
                    OnHand = il.OnHand ?? 0,
                    NewOnHand = il.OnHand ?? 0,
                    ItemName = il.ItemName!,
                    NewItemName = il.ItemName!,
                    Description = il.Description ?? "",
                    NewDescription = il.Description ?? "",
                    IsBillable = il.Inventory!.Billable == 1,
                    NewIsBillable = il.Inventory!.Billable == 1,
                    IsModified = false
                });

            if (LocationId.HasValue)
            {
                query = query.Where(i => i.LocationId == LocationId.Value);
            }

            var items = await query.OrderBy(i => i.ItemName).ToListAsync();
            inventoryItems = items;
            UpdateDisplayedItems();
            UpdateDisplayedItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading inventory: {ex.Message}");
        }
    }

    private async Task LoadAsOfDateOptionsAsync()
    {
        try
        {
            var dates = await LockerDbContext.TwoWeeks
                .Select(t => t.SelectDate)
                .Distinct()
                .OrderByDescending(d => d)
                .Select(d => d.ToString("MM/dd/yyyy"))
                .ToListAsync();

            var today = DateTime.Today.ToString("MM/dd/yyyy");
            if (!dates.Contains(today))
            {
                dates.Insert(0, today);
            }
            if (!dates.Any())
            {
                dates.Add(today);
            }
            asOfDateOptions = dates;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading 'as of' date options: {ex.Message}");
            asOfDateOptions = new List<string> { DateTime.Today.ToString("MM/dd/yyyy") };
        }
    }

    private void ShowDetails(InventoryLocationViewModel item)
    {
        selectedItem = item;
        showDetailsDialog = true;
    }

    private void MoveInventory(InventoryLocationViewModel item)
    {
        // TODO: Implement inventory movement
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/locations");
    }

    private async Task PrintInventoryList()
    {
        Console.WriteLine("Starting print...");
        if (!int.TryParse(selectedPrintLocation, out int locationId))
        {
            Console.WriteLine($"Failed to parse location ID: {selectedPrintLocation}");
            return;
        }

        try
        {
            var selectedLocation = allLocations?.FirstOrDefault(l => l.LocationId == locationId);
            if (selectedLocation == null)
            {
                Console.WriteLine($"Location not found: {locationId}");
                return;
            }

            byte[] pdfBytes;
            
            // If printing for a different location than current, filter out materials and zero quantities
            if (locationId != LocationId)
            {
                Console.WriteLine($"Generating filtered PDF for different location {locationId}...");
                pdfBytes = await ReportService.GenerateGearListPdf(
                    locationId,
                    selectedLocation.Name,
                    selectedLocation.Berth,
                    2); // Use 2 to indicate different location filtering
            }
            else
            {
                // For current location, check finished flag
                if (Finished == 1)
                {
                    Console.WriteLine($"Generating unfiltered PDF for finished location {locationId}...");
                    pdfBytes = await ReportService.GenerateGearListPdf(
                        locationId,
                        selectedLocation.Name,
                        selectedLocation.Berth,
                        1); // Finished = 1, no filtering
                }
                else
                {
                    Console.WriteLine($"Generating PDF with onhand filter for location {locationId}...");
                    pdfBytes = await ReportService.GenerateGearListPdf(
                        locationId,
                        selectedLocation.Name,
                        selectedLocation.Berth,
                        0); // Finished = 0, filter onhand only
                }
            }

            await ShowPdf(pdfBytes, locationId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task ShowPdf(byte[] pdfBytes, int locationId)
    {
        if (pdfBytes == null || pdfBytes.Length == 0)
        {
            Console.WriteLine("PDF generation failed - no bytes returned");
            return;
        }

        // Convert the PDF bytes to a base64 string
        var base64 = Convert.ToBase64String(pdfBytes);
        Console.WriteLine("PDF converted to base64");
        
        // Open PDF in new tab using JavaScript
        var filename = $"gear_list_{locationId}_{DateTime.Now:yyyyMMdd}.pdf";
        await JSRuntime.InvokeVoidAsync("eval", $@"
            const byteCharacters = atob('{base64}');
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {{
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }}
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], {{ type: 'application/pdf' }});
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
            // Clean up the URL after 1 minute
            setTimeout(() => URL.revokeObjectURL(url), 60000);
        ");
        
        Console.WriteLine("PDF opened in new tab");
    }

    private void ItemNameChanged(InventoryLocationViewModel item, ChangeEventArgs e)
    {
        item.NewItemName = e.Value?.ToString() ?? item.ItemName;
        item.IsModified = item.NewItemName != item.ItemName || 
                         item.NewDescription != item.Description ||
                         item.NewIsBillable != item.IsBillable ||
                         item.NewOnHand != item.OnHand;
        StateHasChanged();
    }

    private void DescriptionChanged(InventoryLocationViewModel item, ChangeEventArgs e)
    {
        item.NewDescription = e.Value?.ToString() ?? item.Description;
        item.IsModified = item.NewItemName != item.ItemName || 
                         item.NewDescription != item.Description ||
                         item.NewIsBillable != item.IsBillable ||
                         item.NewOnHand != item.OnHand;
        StateHasChanged();
    }

    private void BillableChanged(InventoryLocationViewModel item, ChangeEventArgs e)
    {
        item.NewIsBillable = (bool)(e.Value ?? item.IsBillable);
        item.IsModified = item.NewItemName != item.ItemName || 
                         item.NewDescription != item.Description ||
                         item.NewIsBillable != item.IsBillable ||
                         item.NewOnHand != item.OnHand;
        StateHasChanged();
    }

    private void OnHandChanged(InventoryLocationViewModel item, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double newValue))
        {
            item.NewOnHand = newValue;
            item.IsModified = item.NewItemName != item.ItemName || 
                             item.NewDescription != item.Description ||
                             item.NewIsBillable != item.IsBillable ||
                             item.NewOnHand != item.OnHand;
            StateHasChanged();
        }
    }

    private async Task SaveChanges(InventoryLocationViewModel item)
    {
        try
        {
            var inventoryLocation = await LockerDbContext.InventoryLocations
                .Include(il => il.Inventory)
                .FirstOrDefaultAsync(il => il.ItemId == item.ItemId && il.LocationId == item.LocationId);

            if (inventoryLocation != null)
            {
                // Update inventory location
                inventoryLocation.ItemName = item.NewItemName;
                inventoryLocation.Description = item.NewDescription;
                inventoryLocation.OnHand = item.NewOnHand;

                // Update inventory
                if (inventoryLocation.Inventory != null)
                {
                    inventoryLocation.Inventory.Name = item.NewItemName;
                    inventoryLocation.Inventory.Billable = (short)(item.NewIsBillable ? 1 : 0);
                }

                await LockerDbContext.SaveChangesAsync();
                
                // Update the displayed values
                item.ItemName = item.NewItemName;
                item.Description = item.NewDescription;
                item.OnHand = item.NewOnHand;
                item.IsBillable = item.NewIsBillable;
                item.IsModified = false;
                
                // Refresh the data
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
        }
    }

    private void ShowMoveDialog(InventoryLocationViewModel item)
    {
        selectedItem = item;
        showMoveDialog = true;
    }

    private async Task OnMoveCompleted(bool success)
    {
        if (success)
        {
            await LoadData();
        }
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        UpdateDisplayedItems();
        StateHasChanged();
    }

    private void SortData()
    {
        isAscending = currentSortField == "ItemName" ? !isAscending : true;
        currentSortField = "ItemName";

        if (inventoryItems != null)
        {
            inventoryItems = isAscending 
                ? inventoryItems.OrderBy(x => x.ItemName).ToList()
                : inventoryItems.OrderByDescending(x => x.ItemName).ToList();
            UpdateDisplayedItems();
            StateHasChanged();
        }
    }
}