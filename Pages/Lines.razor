@page "/lines"
@using LockerApp.Models.LockerDB
@using LockerApp.Data.LockerDB
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@inject LockerDbContext LockerDbContext
@inject IJSRuntime JSRuntime

<PageTitle>Lines Management</PageTitle>

<h3>Lines Management</h3>

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-primary" @onclick="() => OpenLineModal(null)">Add New Line</button>
    </div>
    <div class="col-md-4">
        <input type="text" class="form-control" placeholder="Search lines..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterLines" />
    </div>
</div>

@if (lines == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Sharehold Group</th>
                    <th>Comm Group</th>
                    <th>Last Modified</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>                @foreach (var line in filteredLines ?? Enumerable.Empty<Line>())
                {
                    <tr>
                        <td>@line.Id</td>
                        <td>@line.Name</td>
                        <td>@line.ShareholdGroup</td>
                        <td>@line.CommGroup</td>
                        <td>@(line.ModDate?.ToString("g") ?? line.AddDate?.ToString("g"))</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => OpenLineModal(line)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteLine(line)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (showLineModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(selectedLine == null ? "Add New Line" : "Edit Line")</h5>
                    <button type="button" class="btn-close" @onclick="CloseLineModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingLine" OnValidSubmit="HandleLineSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="lineId" class="form-label">Line ID</label>
                            <InputText id="lineId" class="form-control" @bind-Value="editingLine.Id" disabled="@(selectedLine != null)" maxlength="6" />
                            <small class="text-muted">Maximum 6 characters</small>
                        </div>

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="editingLine.Name" maxlength="30" />
                            <small class="text-muted">Maximum 30 characters</small>
                        </div>

                        <div class="mb-3">
                            <label for="shareholdGroup" class="form-label">Sharehold Group</label>
                            <InputText id="shareholdGroup" class="form-control" @bind-Value="editingLine.ShareholdGroup" maxlength="8" />
                            <small class="text-muted">Maximum 8 characters</small>
                        </div>

                        <div class="mb-3">
                            <label for="commGroup" class="form-label">Comm Group</label>
                            <InputText id="commGroup" class="form-control" @bind-Value="editingLine.CommGroup" maxlength="3" />
                            <small class="text-muted">Maximum 3 characters</small>
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseLineModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Line>? lines;
    private List<Line>? filteredLines;
    private bool showLineModal;
    private Line? selectedLine;
    private Line editingLine = new();
    private string? searchTerm;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        lines = await LockerDbContext.Lines.ToListAsync();
        FilterLines();
    }

    private void FilterLines()
    {
        filteredLines = lines?
            .Where(l => string.IsNullOrEmpty(searchTerm) ||
                       l.Id.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       (l.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                       (l.ShareholdGroup?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                       (l.CommGroup?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList();
    }

    private void OpenLineModal(Line? line)
    {
        selectedLine = line;
        editingLine = line == null ? new Line() : new Line
        {
            Id = line.Id,
            Name = line.Name,
            ShareholdGroup = line.ShareholdGroup,
            CommGroup = line.CommGroup
        };
        showLineModal = true;
    }

    private void CloseLineModal()
    {
        showLineModal = false;
        selectedLine = null;
        editingLine = new();
    }

    private async Task HandleLineSubmit()
    {
        if (selectedLine == null)
        {
            editingLine.AddDate = DateTime.Now;
            editingLine.AddUser = "SYSTEM"; // TODO: Get current user
            LockerDbContext.Lines.Add(editingLine);
        }
        else
        {
            var line = await LockerDbContext.Lines.FindAsync(selectedLine.Id);
            if (line != null)
            {
                line.Name = editingLine.Name;
                line.ShareholdGroup = editingLine.ShareholdGroup;
                line.CommGroup = editingLine.CommGroup;
                line.ModDate = DateTime.Now;
                line.ModUser = "SYSTEM"; // TODO: Get current user
            }
        }

        await LockerDbContext.SaveChangesAsync();
        await LoadData();
        CloseLineModal();
    }

    private async Task DeleteLine(Line line)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this line?"))
        {
            LockerDbContext.Lines.Remove(line);
            await LockerDbContext.SaveChangesAsync();
            await LoadData();
        }
    }
}
