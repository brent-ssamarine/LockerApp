@page "/jobs"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@using AccessMigrationApp.Models.LockerDB
@using AccessMigrationApp.Models.ViewModels
@using AccessMigrationApp.Data.LockerDB

@inject LockerDbContext DbContext
@inject IJSRuntime JS

<PageTitle>Jobs Management</PageTitle>

<h3>Jobs Management</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
    </div>
}

@if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col">
            <button class="btn btn-primary" @onclick="() => OpenJobModal(null)">Add New Job</button>
        </div>
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Search jobs..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterJobs" />
        </div>
    </div>

    @if (jobs is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Company</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>                    @foreach (var job in filteredJobs ?? Enumerable.Empty<Job>())
                    {
                        <tr>
                            <td>@job.Name</td>
                            <td>@job.Company</td>
                            <td>                <button class="btn btn-sm btn-primary me-2" @onclick="() => EditJobAction(job)">Edit</button>
                                <button class="btn btn-sm btn-info me-2" @onclick="() => ViewJobItems(job)">Items</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteJobAction(job)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@if (showJobModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(selectedJob is null ? "Add New Job" : "Edit Job")</h5>
                    <button type="button" class="btn-close" @onclick="CloseJobModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingJob" OnValidSubmit="HandleJobSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Job Name</label>
                            <InputText id="name" class="form-control" @bind-Value="editingJob.Name" />
                        </div>

                        <div class="mb-3">
                            <label for="company" class="form-label">Company</label>
                            <InputText id="company" class="form-control" @bind-Value="editingJob.Company" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseJobModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showJobItemsModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Job Items - @selectedJob?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseJobItemsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="() => EditNewJobItem()">Add Item</button>
                    </div>

                    @if (jobItems is null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Item</th>
                                    <th>Name</th>
                                    <th>Default Qty</th>
                                    <th>Issue Qty</th>
                                    <th>Billable</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in jobItems)
                                {
                                    <tr>
                                        <td>@item.InvItem</td>
                                        <td>@item.InvName</td>
                                        <td>@item.DefaultQuantity</td>
                                        <td>@item.IssueQuantity</td>
                                        <td>@(item.Billable ?? false ? "Yes" : "No")</td>
                                        <td>                                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditJobItem(item)">Edit</button>
                                            <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteJobItem(item)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showJobItemModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(selectedJobItem is null ? "Add Job Item" : "Edit Job Item")</h5>
                    <button type="button" class="btn-close" @onclick="CloseJobItemModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingJobItem" OnValidSubmit="HandleJobItemSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="invItem" class="form-label">Item</label>
                            <InputSelect id="invItem" class="form-select" @bind-Value="editingJobItem.InvItem">
                                <option value="">Select an item...</option>
                                @if (inventoryItems is not null)
                                {
                                    @foreach (var item in inventoryItems)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="defaultQty" class="form-label">Default Quantity</label>
                            <InputNumber id="defaultQty" class="form-control" @bind-Value="editingJobItem.DefaultQuantity" />
                        </div>

                        <div class="mb-3">
                            <label for="issueQty" class="form-label">Issue Quantity</label>
                            <InputNumber id="issueQty" class="form-control" @bind-Value="editingJobItem.IssueQuantity" />
                        </div>

                        <div class="mb-3">                            <label>
                                @{
                                    var isChecked = editingJobItem.Billable ?? false;
                                }
                                <InputCheckbox @bind-Value="isChecked" @bind-Value:after="() => editingJobItem.Billable = isChecked" /> Billable
                            </label>
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseJobItemModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {    private List<Job>? jobs;
    private List<Job>? filteredJobs;
    private List<JobItemViewModel>? jobItems;
    private List<Models.LockerDB.Inventory>? inventoryItems;
    private bool showJobModal;
    private bool showJobItemsModal;
    private bool showJobItemModal;
    private Job? selectedJob;
    private JobItemViewModel? selectedJobItem;
    private Job editingJob = new();
    private JobItemViewModel editingJobItem = new();
    private string? searchTerm;
    private string? errorMessage;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            await LoadData();
            await LoadInventoryItems();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        try
        {
            jobs = await DbContext.Jobs
                .Include(j => j.JobItems)
                .OrderBy(j => j.Name)
                .ToListAsync();
            FilterJobs();
        }
        catch (Exception ex)
        {
            throw new Exception("Failed to load jobs.", ex);
        }
    }

    private async Task LoadInventoryItems()
    {
        try
        {
            inventoryItems = await DbContext.Inventories
                .Where(i => i.Active == 1)
                .OrderBy(i => i.Name)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            throw new Exception("Failed to load inventory items.", ex);
        }
    }

    private void FilterJobs()
    {
        if (jobs is null) return;
        
        filteredJobs = string.IsNullOrEmpty(searchTerm)
            ? jobs.ToList()
            : jobs.Where(j => 
                j.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                j.Company.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
    }

    private void OpenJobModal(Job? job)
    {
        try
        {
            selectedJob = job;
            editingJob = job is null ? new Job() : new Job
            {
                Name = job.Name,
                Company = job.Company
            };
            showJobModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error opening job modal: {ex.Message}";
        }
    }

    private async Task HandleJobSubmit()
    {
        try
        {
            if (selectedJob is null)
            {
                // Check if job name already exists
                var existingJob = await DbContext.Jobs
                    .FirstOrDefaultAsync(j => j.Name == editingJob.Name);

                if (existingJob is not null)
                {
                    errorMessage = "A job with this name already exists.";
                    return;
                }

                DbContext.Jobs.Add(editingJob);
            }
            else
            {
                var job = await DbContext.Jobs
                    .FirstOrDefaultAsync(j => j.Name == selectedJob.Name);

                if (job is not null)
                {
                    job.Company = editingJob.Company;
                    DbContext.Jobs.Update(job);
                }
                else
                {
                    errorMessage = "Job not found.";
                    return;
                }
            }

            await DbContext.SaveChangesAsync();
            await LoadData();
            CloseJobModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving job: {ex.Message}";
        }
    }

    private async Task DeleteJob(Job job)
    {
        try
        {
            if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this job and all its items?"))
            {
                // Delete related job items first
                var jobItems = await DbContext.JobItems
                    .Where(ji => ji.Company == job.Company)
                    .ToListAsync();
                
                if (jobItems.Any())
                {
                    DbContext.JobItems.RemoveRange(jobItems);
                }

                DbContext.Jobs.Remove(job);
                await DbContext.SaveChangesAsync();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting job: {ex.Message}";
        }
    }

    private void CloseJobModal()
    {
        showJobModal = false;
        selectedJob = null;
        editingJob = new();
    }    private async Task<JobItem?> LoadJobItem(int jobItemId)
    {
        var jobItem = await DbContext.JobItems
            .Include(ji => ji.Inventory)
            .FirstOrDefaultAsync(ji => ji.Id == jobItemId);
            
        return jobItem;
    }
      private async Task LoadJobItems(Job job)
    {
        try
        {
            var items = await DbContext.JobItems
                .Include(ji => ji.Inventory)
                .Where(ji => ji.Company == job.Company)
                .OrderBy(ji => ji.InvName)
                .ToListAsync();
            
            jobItems = items.Select(JobItemViewModel.FromModel).ToList();
            showJobItemsModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading job items: {ex.Message}";
            StateHasChanged();
        }    }

    private async Task OpenJobItemsModal(Job job)
    {
        selectedJob = job;
        await LoadJobItems(job);
    }
    
    private void CloseJobItemsModal()
    {
        showJobItemsModal = false;
        selectedJob = null;
        jobItems = null;
    }

    private void OpenJobItemModal(JobItemViewModel? jobItem)
    {
        try
        {
            selectedJobItem = jobItem;
            editingJobItem = jobItem ?? new JobItemViewModel 
            { 
                Company = selectedJob?.Company ?? "", 
                JobClass = selectedJob?.Name ?? "" 
            };
            showJobItemModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error opening job item modal: {ex.Message}";
        }
    }

    private void CloseJobItemModal()
    {
        showJobItemModal = false;
        selectedJobItem = null;
        editingJobItem = new();    }

    private async Task HandleJobItemSubmit()
    {
        try
        {                    var inventory = await DbContext.Inventories
                        .FirstOrDefaultAsync(i => i.Id == editingJobItem.InvItem);

            if (inventory is null)
            {
                errorMessage = "Selected inventory item not found.";
                return;
            }            editingJobItem.InvName = inventory.Name ?? "";
            if (selectedJob != null)
            {
                editingJobItem.Company = selectedJob.Company;
                editingJobItem.JobClass = selectedJob.Name;
            }

            if (selectedJobItem is null)
            {
                var newJobItem = new JobItem();
                editingJobItem.UpdateModel(newJobItem);
                DbContext.JobItems.Add(newJobItem);
            }
            else
            {
                var jobItem = await DbContext.JobItems
                    .FindAsync(selectedJobItem.Id);

                if (jobItem is not null)
                {
                    editingJobItem.UpdateModel(jobItem);
                    DbContext.JobItems.Update(jobItem);
                }
                else
                {
                    errorMessage = "Job item not found.";
                    return;
                }
            }            await DbContext.SaveChangesAsync();
            
            if (selectedJob is not null)
            {
                await LoadJobItems(selectedJob);
            }
            
            CloseJobItemModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving job item: {ex.Message}";
        }
    }    private async Task DeleteJobItem(JobItemViewModel jobItemView)
    {
        try
        {
            if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this job item?"))
            {
                var jobItem = await DbContext.JobItems.FindAsync(jobItemView.Id);
                if (jobItem != null)
                {
                    DbContext.JobItems.Remove(jobItem);
                    await DbContext.SaveChangesAsync();
                    
                    if (selectedJob is not null)
                    {
                        await LoadJobItems(selectedJob);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting job item: {ex.Message}";
        }
    }
    private void EditNewJobItem()
    {
        selectedJobItem = null;
        editingJobItem = new JobItemViewModel 
        { 
            Company = selectedJob?.Company ?? "", 
            JobClass = selectedJob?.Name ?? "" 
        };
        showJobItemModal = true;
    }
    private void EditJobItem(JobItemViewModel item)
    {
        selectedJobItem = item;
        editingJobItem = new JobItemViewModel
        {
            Id = item.Id,
            Company = item.Company,
            JobClass = item.JobClass,
            InvItem = item.InvItem,
            InvName = item.InvName,
            DefaultQuantity = item.DefaultQuantity,
            IssueQuantity = item.IssueQuantity,
            Billable = item.Billable
        };
        showJobItemModal = true;
    }
    private Task EditJobAction(Job job)
    {
        OpenJobModal(job);
        return Task.CompletedTask;
    }

    private async Task ViewJobItems(Job job)
    {
        selectedJob = job;
        await LoadJobItems(job);
    }

    private Task DeleteJobAction(Job job)
    {
        _ = DeleteJob(job);
        return Task.CompletedTask;
    }
}
